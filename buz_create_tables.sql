--
-- Скрипт сгенерирован Devart dbForge Studio for Oracle, Версия 3.6.389.0
-- Домашняя страница продукта: http://www.devart.com/ru/dbforge/oracle/studio
-- Дата скрипта: 10.03.2018 22:30:25
-- Версия сервера: Oracle Database 11g Express Edition Release 11.2.0.2.0 - Production
-- Версия клиента: 
--


CREATE SEQUENCE BUZ.RTR_YIELD_ID_SEQ
START WITH 41
INCREMENT BY 1;

CREATE SEQUENCE BUZ.RTR_TRADES_ID_SEQ
START WITH 68
INCREMENT BY 1;

CREATE SEQUENCE BUZ.INCOME_ITEM_ID_SEQ
START WITH 21
INCREMENT BY 1;

CREATE SEQUENCE BUZ.INCOME_FACT_ID_SEQ
START WITH 102
INCREMENT BY 1;

CREATE SEQUENCE BUZ.CURRENCY_ID_SEQ
START WITH 21
INCREMENT BY 1;

CREATE TABLE BUZ.CURRENCY (
  CURRENCY_ID     NUMBER(*, 0)  NOT NULL,
  CURRENCY_TICKER NVARCHAR2(10) NOT NULL,
  PRIMARY KEY (CURRENCY_ID)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

CREATE TABLE BUZ.INCOME_ITEM (
  ITEM_ID NUMBER(*, 0) NOT NULL,
  ITEM    NVARCHAR2(2000),
  PRIMARY KEY (ITEM_ID)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

CREATE TABLE BUZ.SLD (
  PERIOD       DATE,
  CURRENCY_ID  NUMBER(*, 0),
  BSLD         NUMBER(10, 2),
  TOTAL_INCOME NUMBER(10, 2),
  COSTS        NUMBER(10, 2),
  ESLD         NUMBER(10, 2),
  CONSTRAINT PK_SLD PRIMARY KEY (PERIOD, CURRENCY_ID)
)
TABLESPACE SYSTEM
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

CREATE TABLE BUZ.RTR_MODELS (
  MODEL_ID  NUMBER(*, 0),
  MODEL     VARCHAR2(150 BYTE),
  USE_MODEL NUMBER(*, 0),
  CONSTRAINT PK_RTR_MODELS PRIMARY KEY (MODEL_ID)
)
TABLESPACE SYSTEM
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

CREATE TABLE BUZ.RTR_TICKERS (
  TICKER_ID NUMBER(*, 0),
  TICKER    VARCHAR2(10 BYTE),
  CONSTRAINT PK_RTR_TICKERS PRIMARY KEY (TICKER_ID)
)
TABLESPACE SYSTEM
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

CREATE TABLE BUZ.MONTHLY_INCOME (
  PERIOD          DATE,
  TOTAL           NUMBER,
  CURRENCY_ID     NUMBER(*, 0)  NOT NULL,
  CURRENCY_TICKER NVARCHAR2(10) NOT NULL,
  B_DATE          DATE,
  CONSTRAINT PK_MONTHLY_INCOME PRIMARY KEY (PERIOD, CURRENCY_ID)
)
TABLESPACE SYSTEM
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

CREATE TABLE BUZ.RTR_YIELD (
  YIELD_DATE     DATE,
  THEOR_YIELD_N1 FLOAT(63),
  THEOR_YIELD_N2 FLOAT(63),
  THEOR_YIELD_N3 FLOAT(63),
  FACT_YIELD     FLOAT(63),
  YIELD_ID       NUMBER(*, 0)
)
TABLESPACE SYSTEM
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

CREATE TABLE BUZ.BALANCE (
  B_DATE      DATE          NOT NULL,
  CURRENCY_ID NUMBER(*, 0)  DEFAULT 1,
  B_VALUE     NUMBER(10, 2) NOT NULL,
  PRIMARY KEY (B_DATE),
  FOREIGN KEY (CURRENCY_ID)
  REFERENCES BUZ.CURRENCY (CURRENCY_ID)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

COMMENT ON TABLE BUZ.BALANCE IS 'Собственные средства в виде наличных, ср-в на ЭПС и банковских счетах на 1 число месяца';

CREATE TABLE BUZ.INCOME_FACT (
  F_ID           NUMBER(*, 0)  NOT NULL,
  F_DATE         DATE          NOT NULL,
  CURRENCY_ID    NUMBER(*, 0)  DEFAULT 1,
  INCOME_VALUE   NUMBER(10, 2) NOT NULL,
  COMMENTS       NVARCHAR2(2000),
  INCOME_ITEM_ID NUMBER(*, 0),
  PRIMARY KEY (F_ID),
  FOREIGN KEY (CURRENCY_ID)
  REFERENCES BUZ.CURRENCY (CURRENCY_ID),
  FOREIGN KEY (INCOME_ITEM_ID)
  REFERENCES BUZ.INCOME_ITEM (ITEM_ID)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

CREATE TABLE BUZ.ASSET_BALANCE (
  B_DATE      DATE          NOT NULL,
  CURRENCY_ID NUMBER(*, 0)  DEFAULT 1,
  B_VALUE     NUMBER(10, 2) NOT NULL,
  PRIMARY KEY (B_DATE),
  FOREIGN KEY (CURRENCY_ID)
  REFERENCES BUZ.CURRENCY (CURRENCY_ID)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

CREATE TABLE BUZ.RTR_EQUITY (
  TR_ACCOUNT     VARCHAR2(100 BYTE),
  EQ_DATE        DATE,
  CURRENCY_ID    NUMBER(*, 0)  DEFAULT 1,
  EQ_VALUE       NUMBER(10, 2) NOT NULL,
  MONTHLY_PROFIT NUMBER(10, 2),
  CONSTRAINT PK_TR_EQUITY PRIMARY KEY (EQ_DATE, CURRENCY_ID, TR_ACCOUNT),
  FOREIGN KEY (CURRENCY_ID)
  REFERENCES BUZ.CURRENCY (CURRENCY_ID)
)
TABLESPACE SYSTEM
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

CREATE TABLE BUZ.RTR_TRADES (
  O_DATE    DATE,
  O_DIR     CHAR(1 BYTE)      DEFAULT 's',
  O_SIZE    NUMBER(6, 2),
  TICKER_ID NUMBER(*, 0),
  MODEL_ID  NUMBER(*, 0),
  O_PRICE   NUMBER(12, 5),
  O_ORDER   VARCHAR2(15 BYTE) DEFAULT 'sell limit',
  SL        NUMBER(12, 5),
  TP        NUMBER(12, 5),
  C_DATE    DATE,
  C_PRICE   NUMBER(12, 5),
  C_ORDER   VARCHAR2(15 BYTE),
  TRADE_ID  NUMBER(*, 0),
  CONSTRAINT CK_RTR_TRADES_C_ORDER CHECK (c_order IN ('mc', 'sl', 'tp')),
  CONSTRAINT CK_RTR_TRADES_O_DIR CHECK (o_dir IN ('s', 'b')),
  CONSTRAINT CK_RTR_TRADES_O_ORDER CHECK (o_order IN ('market_sell', 'market_buy', 'sell_limit')),
  CONSTRAINT FK_RTR_TRADES_TICKER_ID FOREIGN KEY (TICKER_ID)
  REFERENCES BUZ.RTR_TICKERS (TICKER_ID)
)
TABLESPACE SYSTEM
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

CREATE OR REPLACE VIEW BUZ.V_MONTHLY_INCOME (
  PERIOD,
  TOTAL
) AS
    SELECT
    --extract(MONTH FROM F_DATE),
    TRUNC(F_DATE, 'YY') period,
    SUM(INCOME_VALUE) total
      FROM income_fact
      GROUP BY TRUNC(F_DATE, 'YY');

CREATE OR REPLACE VIEW BUZ.V_MONTHLY_INCOME_GROUP (
  PERIOD,
  ITEM,
  TOTAL,
  CURRENCY_TICKER
) AS
    SELECT
    --extract(MONTH FROM F_DATE),
    TRUNC(f.F_DATE, 'MM') period,
    i.item,
    SUM(f.INCOME_VALUE) total,
    c.CURRENCY_TICKER
      FROM income_fact f
        JOIN INCOME_ITEM i
          ON i.ITEM_ID = f.income_item_id
          JOIN CURRENCY c
            ON c.CURRENCY_ID = f.CURRENCY_ID
      GROUP BY c.CURRENCY_TICKER,
               TRUNC(F_DATE, 'MM'),
               i.item;

CREATE OR REPLACE VIEW BUZ.V_BALANCE_UNION (
  B_DATE,
  CURRENCY_TICKER,
  TOTAL
) AS
    SELECT b.b_date,
           c.CURRENCY_TICKER,
           SUM(b.B_VALUE) total
      FROM (SELECT B_DATE,
                   CURRENCY_ID,
                   B_VALUE --total
          FROM asset_balance
          UNION ALL
        SELECT B_DATE,
               CURRENCY_ID,
               B_VALUE-- total
          FROM balance
          WHERE 1 = 1
            AND B_DATE >= TO_DATE('20180101', 'yyyymmdd')) b
        JOIN CURRENCY c
          ON c.CURRENCY_ID = b.CURRENCY_ID
      GROUP BY b.B_DATE,
               c.CURRENCY_TICKER;

CREATE OR REPLACE VIEW BUZ.V_MONTHLY_INCOME_TOTAL (
  PERIOD,
  TOTAL,
  CURRENCY_ID,
  CURRENCY_TICKER,
  B_DATE
) AS
    SELECT
    --extract(MONTH FROM F_DATE),
    TRUNC(F_DATE, 'MM') period,
    SUM(INCOME_VALUE) total,
    c.CURRENCY_ID,
    c.CURRENCY_TICKER,
    ADD_MONTHS(TRUNC(F_DATE, 'MM'), 1) b_date
      FROM income_fact f
        JOIN CURRENCY c
          ON c.CURRENCY_ID = f.CURRENCY_ID
      GROUP BY c.CURRENCY_TICKER,
               c.CURRENCY_ID,
               TRUNC(F_DATE, 'MM');

CREATE OR REPLACE VIEW BUZ.V_RTR_RESULTS (
  MM,
  YY,
  TR_ACCOUNT,
  CURRENCY_TICKER,
  EQ_VALUE,
  MONTHLY_PROFIT
) AS
    SELECT EXTRACT(MONTH FROM f.eq_date) mm,
           EXTRACT(YEAR FROM f.eq_date) yy,
           f.tr_account,
           c.CURRENCY_TICKER,
           f.EQ_VALUE,
           f.MONTHLY_PROFIT
      --, f.RUNNING_PROFIT
      FROM rtr_equity f
        JOIN CURRENCY c
          ON c.CURRENCY_ID = f.CURRENCY_ID
      ORDER BY 2,
               1,
               3;

CREATE OR REPLACE VIEW BUZ.V_RTR_TRADES (
  O_DATE,
  O_DIR,
  O_SIZE,
  TICKER,
  MODEL_ID,
  MODEL,
  O_ORDER,
  SL,
  TP,
  C_DATE,
  C_PRICE,
  C_ORDER,
  C_SLIPPAGE,
  RES,
  PLUS
) AS
    SELECT O_DATE,
           O_DIR,
           O_SIZE
           -- ,t.TICKER_ID,
           ,
           k.ticker,
           t.MODEL_ID,
           m.model,
           O_PRICE
           O_ORDER,
           SL,
           TP,
           C_DATE,
           C_PRICE,
           C_ORDER,
           CASE t.c_order WHEN 'mc' THEN 0 ELSE CASE t.o_dir WHEN 's' THEN CASE t.c_order WHEN 'sl' THEN (t.sl - t.c_price) ELSE (t.tp - t.c_price) END WHEN 'b' THEN CASE t.c_order WHEN 'sl' THEN -1 * (t.sl - t.c_price) ELSE -(t.tp - t.c_price) END ELSE NULL END END AS c_slippage,
           CASE t.o_dir WHEN 's' THEN (t.o_price - t.c_price) ELSE -1 * (t.o_price - t.c_price) END AS res,
           CASE WHEN (
               CASE t.o_dir WHEN 's' THEN (t.o_price - t.c_price) ELSE -1 * (t.o_price - t.c_price) END) > 0 THEN 1 ELSE 0 END AS plus
      FROM BUZ.RTR_TRADES t
        JOIN rtr_tickers k
          ON t.ticker_id = k.ticker_id
          JOIN rtr_models m
            ON m.model_id = t.model_id;

CREATE OR REPLACE VIEW BUZ.V_SLD (
  MM,
  YY,
  BSLD,
  TOTAL_INCOME,
  COSTS,
  ESLD
) AS
    SELECT --PERIOD
    EXTRACT(MONTH FROM PERIOD) mm,
    EXTRACT(YEAR FROM PERIOD) yy
    --CURRENCY_ID,
    ,
    c.CURRENCY_TICKER
    BSLD,
    TOTAL_INCOME,
    COSTS,
    ESLD
      FROM BUZ.SLD s
        JOIN Currency c
          ON c.currency_id = s.CURRENCY_ID
      ORDER BY 2,
               1;

CREATE OR REPLACE VIEW BUZ.V_RTR_FACTS_N_THEOR (
  DAY_NUMBER,
  YIELD_DATE,
  YIELD_N1,
  YIELD_N2,
  YIELD_N3,
  YIELD_FACT,
  OWNER_EQUITY,
  O_DIR,
  O_SIZE,
  TICKER,
  O_PRICE,
  C_ORDER,
  C_PRICE
)
AS
  SELECT 
  DENSE_RANK() OVER(ORDER BY y.YIELD_DATE) day_number
  ,y."YIELD_DATE",y."YIELD_N1",y."YIELD_N2",y."YIELD_N3",y."YIELD_FACT",y."OWNER_EQUITY"
  , t.O_DIR, t.O_SIZE, rt.TICKER, t.O_PRICE, t.C_ORDER, t.C_PRICE
  from BUZ.RTR_YIELD y
  FULL JOIN BUZ.RTR_TRADES t ON y.YIELD_DATE = TRUNC(t.O_DATE)
  JOIN RTR_TICKERS rt ON rt.TICKER_ID = t.TICKER_ID;

CREATE OR REPLACE TRIGGER BUZ.CURRENCY_ID_TRG
  BEFORE INSERT
  ON BUZ.CURRENCY
  FOR EACH ROW
BEGIN
  SELECT currency_id_seq.NEXTVAL
    INTO :NEW.currency_id
    FROM dual;
END;

/

CREATE OR REPLACE TRIGGER BUZ.INCOME_FACT_ID_TRG
  BEFORE INSERT
  ON BUZ.INCOME_FACT
  FOR EACH ROW
BEGIN
  SELECT income_fact_id_seq.NEXTVAL
    INTO :NEW.f_id
    FROM dual;
END;

/

CREATE OR REPLACE TRIGGER BUZ.INCOME_ITEM_ID_TRG
  BEFORE INSERT
  ON BUZ.INCOME_ITEM
  FOR EACH ROW
BEGIN
  SELECT income_item_id_seq.NEXTVAL
    INTO :NEW.item_id
    FROM dual;
END;

/

CREATE OR REPLACE TRIGGER BUZ.TRADE_ID_TRG
  BEFORE INSERT
  ON BUZ.RTR_TRADES
  FOR EACH ROW
BEGIN
  SELECT rtr_trades_id_seq.NEXTVAL
    INTO :NEW.trade_id
    FROM dual;
END;

/

CREATE OR REPLACE TRIGGER BUZ.RTR_YIELD_ID_TRG
  BEFORE INSERT
  ON BUZ.RTR_YIELD
  FOR EACH ROW
BEGIN
  SELECT rtr_yield_id_seq.NEXTVAL
    INTO :NEW.yield_id
    FROM dual;
END;

/